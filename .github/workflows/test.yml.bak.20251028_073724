name: Tests (pytest)
on:
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:
permissions:
  contents: read
defaults:
  run:
    shell: pwsh
jobs:
  test:
    runs-on: ubuntu-latest
    env:
      AF_SKIP_MT5: '1'
      PYTHONPATH: ${{ github.workspace }}:${{ github.workspace }}/src
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install deps (light)
        run: |
          python -m pip install -U pip
          pip install -r .github/ci-requirements.txt || echo 'ci-reqs optional'
          pip install -r requirements.txt -c .github/constraints-ci.txt || echo 'constraints optional'
          pip install pytest pytest-cov

      - name: Smoke pytest
        run: pytest -q --maxfail=1 --disable-warnings tests/ci_smoke_test.py
      - name: Export allocations (resilient)
        if: always()
        run: |
          New-Item -ItemType Directory -Force -Path artifacts/allocations | Out-Null
          $py = @()
          $py += 'import time, pathlib, traceback'
          $py += 'ts = time.strftime("%Y%m%d_%H%M%S")'
          $py += 'outdir = pathlib.Path("artifacts/allocations"); outdir.mkdir(parents=True, exist_ok=True)'
          $py += 'csv = outdir / f"{ts}_alloc.csv"'
          $py += 'err = outdir / f"{ts}_alloc_error.txt"'
          $py += 'try:'
          $py += '    from alpha_factory.meta_allocator import MetaAllocator, AllocatorConfig'
          $py += '    metrics = {"TF": {"sharpe": 1.2, "dd": 0.06}, "MR": {"sharpe": 1.0, "dd": 0.05}, "VOL": {"sharpe": 0.8, "dd": 0.04}}'
          $py += '    w = MetaAllocator(AllocatorConfig()).allocate(metrics)'
          $py += 'except Exception as e:'
          $py += '    err.write_text(traceback.format_exc(), encoding="utf-8")'
          $py += '    keys = ["TF","MR","VOL"]; w = {k: 1/len(keys) for k in keys}'
          $py += 'csv.write_text("Sleeve,Weight\n" + "\n".join(f"{k},{v}" for k,v in w.items()), encoding="utf-8")'
          $py += 'print("WROTE:", csv)'
          Set-Content -Path export_alloc.py -Encoding utf8 -Value ($py -join "`n")
          python export_alloc.py
          Get-ChildItem -Recurse artifacts | ForEach-Object { "{0}`t{1}" -f (name: Tests (pytest)
on:
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:
permissions:
  contents: read
defaults:
  run:
    shell: pwsh
jobs:
  test:
    runs-on: ubuntu-latest
    env:
      AF_SKIP_MT5: '1'
      PYTHONPATH: ${{ github.workspace }}:${{ github.workspace }}/src
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install deps (light)
        run: |
          python -m pip install -U pip
          pip install -r .github/ci-requirements.txt || echo 'ci-reqs optional'
          pip install -r requirements.txt -c .github/constraints-ci.txt || echo 'constraints optional'
          pip install pytest pytest-cov

      - name: Smoke pytest
        run: pytest -q --maxfail=1 --disable-warnings tests/ci_smoke_test.py

      - name: Export allocations (resilient)
        if: always()
        run: |
          New-Item -ItemType Directory -Force -Path artifacts/allocations | Out-Null
          py -3.11 = @()
          py -3.11 += 'import time, pathlib, traceback'
          py -3.11 += "ts = time.strftime('%Y%m%d_%H%M%S')"
          py -3.11 += "outdir = pathlib.Path('artifacts/allocations'); outdir.mkdir(parents=True, exist_ok=True)"
          py -3.11 += "csv = outdir / f'{ts}_alloc.csv'"
          py -3.11 += "err = outdir / f'{ts}_alloc_error.txt'"
          py -3.11 += 'try:'
          py -3.11 += '    from alpha_factory.meta_allocator import MetaAllocator, AllocatorConfig'
          py -3.11 += "    metrics = {'TF': {'sharpe': 1.2, 'dd': 0.06}, 'MR': {'sharpe': 1.0, 'dd': 0.05}, 'VOL': {'sharpe': 0.8, 'dd': 0.04}}"
          py -3.11 += '    w = MetaAllocator(AllocatorConfig()).allocate(metrics)'
          py -3.11 += 'except Exception:'
          py -3.11 += "    err.write_text(traceback.format_exc(), encoding='utf-8')"
          py -3.11 += "    keys = ['TF','MR','VOL']; w = {k: 1/len(keys) for k in keys}"
          py -3.11 += "csv.write_text('Sleeve,Weight
' + '
'.join(f'{k},{v}' for k,v in w.items()), encoding='utf-8')"
          py -3.11 += "print('WROTE:', csv)"
          Set-Content -Path export_alloc.py -Encoding utf8 -Value py -3.11
          python export_alloc.py
          Write-Host "
--- artifacts tree ---"
          Get-ChildItem -Recurse artifacts | ForEach-Object { '{0}	{1}' -f (.PSIsContainer ? '[D]' : '   '), .FullName }

      - name: Upload allocation CSVs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: allocations
          path: artifacts/allocations/*.csv
          if-no-files-found: warn
          retention-days: 7
.PSIsContainer ? "[D]" : "   "), name: Tests (pytest)
on:
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:
permissions:
  contents: read
defaults:
  run:
    shell: pwsh
jobs:
  test:
    runs-on: ubuntu-latest
    env:
      AF_SKIP_MT5: '1'
      PYTHONPATH: ${{ github.workspace }}:${{ github.workspace }}/src
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install deps (light)
        run: |
          python -m pip install -U pip
          pip install -r .github/ci-requirements.txt || echo 'ci-reqs optional'
          pip install -r requirements.txt -c .github/constraints-ci.txt || echo 'constraints optional'
          pip install pytest pytest-cov

      - name: Smoke pytest
        run: pytest -q --maxfail=1 --disable-warnings tests/ci_smoke_test.py

      - name: Export allocations (resilient)
        if: always()
        run: |
          New-Item -ItemType Directory -Force -Path artifacts/allocations | Out-Null
          py -3.11 = @()
          py -3.11 += 'import time, pathlib, traceback'
          py -3.11 += "ts = time.strftime('%Y%m%d_%H%M%S')"
          py -3.11 += "outdir = pathlib.Path('artifacts/allocations'); outdir.mkdir(parents=True, exist_ok=True)"
          py -3.11 += "csv = outdir / f'{ts}_alloc.csv'"
          py -3.11 += "err = outdir / f'{ts}_alloc_error.txt'"
          py -3.11 += 'try:'
          py -3.11 += '    from alpha_factory.meta_allocator import MetaAllocator, AllocatorConfig'
          py -3.11 += "    metrics = {'TF': {'sharpe': 1.2, 'dd': 0.06}, 'MR': {'sharpe': 1.0, 'dd': 0.05}, 'VOL': {'sharpe': 0.8, 'dd': 0.04}}"
          py -3.11 += '    w = MetaAllocator(AllocatorConfig()).allocate(metrics)'
          py -3.11 += 'except Exception:'
          py -3.11 += "    err.write_text(traceback.format_exc(), encoding='utf-8')"
          py -3.11 += "    keys = ['TF','MR','VOL']; w = {k: 1/len(keys) for k in keys}"
          py -3.11 += "csv.write_text('Sleeve,Weight
' + '
'.join(f'{k},{v}' for k,v in w.items()), encoding='utf-8')"
          py -3.11 += "print('WROTE:', csv)"
          Set-Content -Path export_alloc.py -Encoding utf8 -Value py -3.11
          python export_alloc.py
          Write-Host "
--- artifacts tree ---"
          Get-ChildItem -Recurse artifacts | ForEach-Object { '{0}	{1}' -f (.PSIsContainer ? '[D]' : '   '), .FullName }

      - name: Upload allocation CSVs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: allocations
          path: artifacts/allocations/*.csv
          if-no-files-found: warn
          retention-days: 7
.FullName }
      - name: Upload allocation CSVs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: allocations
          path: artifacts/allocations/*.csv
          if-no-files-found: warn
          retention-days: 7
